git init -> iniciar nuestro repositorio, o sea, indicarle a Git que queremos usar su sistema de control de versiones en nuestro proyecto.
git add -> comando para que nuestro repositorio sepa de la existencia de un archivo o sus últimos cambios
Este comando no almacena las actualizaciones de forma definitiva, solo las guarda en algo que conocemos como “Staging Area” (no te preocupes, lo entenderemos más adelante).
git commit -> El comando para almacenar definitivamente todos los cambios que por ahora viven en el staging area
git commit -m "xxx"-> commit con mensaje
git push -> subir commits a un servidor remoto, un lugar donde todos podamos conectar nuestros proyectos
git status -> estado del repositorio
git show <archivo> -> muestra cambios historicos hechos en un archivo, lineas borradas, nuevas,...
git log <archivo> -> historia de un archivo
git diff <commit1> <commit2> -> diferencias entre cambios. tomar id de los commits de git log.

git reset HEAD -- <archivo> -> quitar archivo de staging area
git reset <commit> -> volver a una version anterior 
    git reset <commit> --hard -> todo vuelve al estado anterior.
    git reset <commit> --soft -> lo que esta en staging, se queda en staging.

git log --stat -> historia de archivos, cuantas lineas se modificaron, commits...
q para salir!!!

git checkout <commit> <archivo> -> ver el estado de ese archivo en ese commit


historia de un archivo
untracked -> git add -> esta en area staging, trackeado, area temporal antes del repo -> git commit -> se va al repositorio



git config --global user.name "Your Name"
git config --global user.email you@example.com



